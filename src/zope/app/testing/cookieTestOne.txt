========================
DocTest Functional Tests
========================

This file documents and tests doctest-based functional tests and basic
Zope web-application functionality.

This second DocTest, zope/app/testing/cookieTestOne.txt, has specifically
been created in order to make sure cookie information is not being saved
across a test suite. If we are saving these via a global 'http' instance,
we will see more results than those listed below. 'http' is instead
created in setUp within _prepare_doctest_keywords, rather than in the
global declarations.

Now we will run tests to ensure that cookies are not saved across doctests.

  >>> from zope.app.testing import functional
  >>> from zope.app.testing.tests import DummyCookiesResponse


We will create some cookie values and saved them in our 'http' value, which
is a CookieHandler() object.

  >>> response = DummyCookiesResponse(dict(
  ...     green=dict(value='grass_fromCookieTestOne', path='/foo', comment='rest is ignored'),
  ...     red=dict(value='keychain_fromCookieTestOne')))

If 'http' is created as a global variable, then every doctest in this
suite will be saving cookies in it, and one doctest may see cookies for
another doctest. We only want two cookies in 'http' - the ones we just
created.

  >>> http.saveCookies(response)
  >>> len(http.cookies)
  2

  >>> http.cookies['green'].OutputString()
  'green=grass_fromCookieTestOne; Path=/foo;'

  >>> http.cookies
  <SimpleCookie: green='grass_fromCookieTestOne' red='keychain_fromCookieTestOne'>

  >>> http.cookies['green'] = 'grass_fromCookieTestOne'
  >>> http.cookies['green']['path'] = '/foo'
  >>> http.cookies['blue'] = 'cottage_fromCookieTestOne'
  >>> http.cookies['blue']['path'] = '/foo/baz'
  >>> http.cookies['red'] = 'keychain_fromCookieTestOne'

  >>> cookieHeader = http.httpCookie('/foo/bar')
  >>> parts = cookieHeader.split('; ')
  >>> parts.sort()
  >>> parts
  ['green=grass_fromCookieTestOne', 'red=keychain_fromCookieTestOne']

  >>> cookieHeader = http.httpCookie('/foo/baz')
  >>> parts = cookieHeader.split('; ')
  >>> parts.sort()
  >>> parts
  ['blue=cottage_fromCookieTestOne', 'green=grass_fromCookieTestOne', 'red=keychain_fromCookieTestOne']
